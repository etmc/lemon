/*****************************************************************************
 * LEMON v1.1                                                                *
 *                                                                           *
 * This file is part of the LEMON implementation of the SCIDAC LIME format.  *
 *                                                                           *
 * It is based directly upon the original c-lime implementation,             *
 * as maintained by C. deTar for the USQCD Collaboration,                    *
 * and inherits its license model and parts of its original code.            *
 *                                                                           *
 * LEMON is free software: you can redistribute it and/or modify             *
 * it under the terms of the GNU General Public License as published by      *
 * the Free Software Foundation, either version 3 of the License, or         *
 * (at your option) any later version.                                       *
 *                                                                           *
 * LEMON is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 * GNU General Public License for more details. You should have received     *
 * a copy of the GNU General Public License along with LEMON. If not,        *
 * see <http://www.gnu.org/licenses/>.                                       *
 *                                                                           *
 * LEMON was written for the European Twisted Mass Collaboration.            *
 * For support requests or bug reports, please contact                       *
 *    A. Deuzeman (deuzeman@itp.unibe.ch)                                    *
 *****************************************************************************/

#pragma once

#include "internal_chainDecomposeEtype.static"

static void lemonSetupIOTypes(LemonSetup **setup, MPI_Comm cartesian, MPI_Offset siteSize, int const *latticeDims, int const *mapping)
{
  int ctr = 0;
  MPI_Offset idx = 0;
  int *mpiCoords = (int*)NULL;
  int *mpiDims = (int*)NULL;
  int *period  = (int*)NULL;
  
  *setup = (LemonSetup*)malloc(sizeof(LemonSetup));
  LemonSetup *dsetup = *setup;

  /* Gathering of the required MPI data from the cartesian communicator. */
  MPI_Cartdim_get(cartesian, &dsetup->ndims);

  dsetup->starts = (int*)calloc(dsetup->ndims, sizeof(int));
  dsetup->localDims = (int*)calloc(dsetup->ndims, sizeof(int));
  dsetup->mappedDims = (int*)calloc(dsetup->ndims, sizeof(int));
  dsetup->localVol = 1;
  dsetup->totalVol = 1;

  mpiCoords = (int*)calloc(dsetup->ndims, sizeof(int));
  mpiDims = (int*)calloc(dsetup->ndims, sizeof(int));
  period  = (int*)calloc(dsetup->ndims, sizeof(int));

  MPI_Cart_get(cartesian, dsetup->ndims, mpiDims, period, mpiCoords);

  /* Calculation of local lattice dimensions from the MPI data we obtained. */
  for (idx = 0; idx < dsetup->ndims; ++idx)
    dsetup->mappedDims[idx]  = latticeDims[mapping[idx]];

  /* To avoid (minimize) issues with integer overflows, we will reorder the writing info slightly.
     First of all, we want to create a basic datatype storing the smallest contiguous block of data.
     This means taking the innermost local size Lz and creating a sequence of Lz * siteSize bytes
     as our elementary type. The local and global volumes will, of course, scale down by a factor Lz
     accordingly! */
  siteSize *= (dsetup->mappedDims[0] / mpiDims[mapping[0]]);
  dsetup->esize = siteSize;
  dsetup->localDims[0] = 1;
  dsetup->starts[0] = dsetup->localDims[0] * mpiCoords[mapping[0]];
  
  for (idx = 1; idx < dsetup->ndims; ++idx)
  {
    dsetup->localDims[idx]   = dsetup->mappedDims[idx] / mpiDims[mapping[idx]];
    dsetup->localVol        *= dsetup->localDims[idx];
    dsetup->totalVol        *= dsetup->mappedDims[idx];
    dsetup->starts[idx]      = dsetup->localDims[idx] * mpiCoords[mapping[idx]];
  }
  free(period);
  free(mpiDims);
  free(mpiCoords);

  /* Set up data types and file view */
  lemonChainDecomposeEtype(dsetup, siteSize); /* Fix potential overflow by chaining non-overflowing sizes. */
   
  /* Build up a filetype that provides the right offsets for the reading of a N-dimensional lattice. */
  MPI_Type_create_subarray(dsetup->ndims, dsetup->mappedDims, dsetup->localDims, dsetup->starts,
			   MPI_ORDER_C, dsetup->etype, &dsetup->ftype);
  MPI_Type_commit(&dsetup->ftype);
  dsetup->striped_flag = 1;
}