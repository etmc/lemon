/*****************************************************************************
 * LEMON v1.1                                                                *
 *                                                                           *
 * This file is part of the LEMON implementation of the SCIDAC LIME format.  *
 *                                                                           *
 * It is based directly upon the original c-lime implementation,             *
 * as maintained by C. deTar for the USQCD Collaboration,                    *
 * and inherits its license model and parts of its original code.            *
 *                                                                           *
 * LEMON is free software: you can redistribute it and/or modify             *
 * it under the terms of the GNU General Public License as published by      *
 * the Free Software Foundation, either version 3 of the License, or         *
 * (at your option) any later version.                                       *
 *                                                                           *
 * LEMON is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 * GNU General Public License for more details. You should have received     *
 * a copy of the GNU General Public License along with LEMON. If not,        *
 * see <http://www.gnu.org/licenses/>.                                       *
 *                                                                           *
 * LEMON was written for the European Twisted Mass Collaboration.            *
 * For support requests or bug reports, please contact                       *
 *    A. Deuzeman (deuzeman@itp.unibe.ch)                                    *
 *****************************************************************************/

#pragma once

#include <stdio.h>
#include <memory.h>
#include <lemon_binheader.h>

#include "internal_bigEndianShort.static"
#include "internal_bigEndianLong.static"
#include "internal_bigEndianLongLong.static"
#include "internal_endOfFile.static"

static int readAndParseHeader(LemonReader *reader)
{
  unsigned int version;
  int MB, ME;
  uint32_t magic_no;
  uint64_t  data_length;
  unsigned char *typebuf;
  MPI_Status status;
  int err;
  int msg_begin = 1;

  /* Destroy any old header structure kicking about */
  if( reader->curr_header != (LemonRecordHeader *)NULL )
  {
    msg_begin = reader->is_last;   /* Remember whether we finished a message */
    lemonDestroyHeader(reader->curr_header);
    reader->curr_header = (LemonRecordHeader *)NULL;
  }

  /* Read the entire header */
  MPI_Barrier(reader->cartesian);

  if (endOfFile(reader))
    return LEMON_EOF;

  err = MPI_File_read_at_all(*reader->fp, reader->off + reader->pos, lemon_header.int64, HDR_SIZE_BYTES, MPI_BYTE, &status);


  if (err)
  {
    fprintf(stderr, "[LEMON] Node %d reports in readAndParseHeader:\n"
                    "        MPI_File_read_at_all returned code %d.\n", reader->my_rank, err);
    return LEMON_ERR_HEADER_NEXT;
  }

  reader->pos += HDR_SIZE_BYTES;

  /* This should work, but seems to fail after a collective read */
  MPI_Get_count(&status, MPI_BYTE, &err);

  if (err == 0)
    return LEMON_EOF;
  if (err != HDR_SIZE_BYTES)
  {
    fprintf(stderr, "[LEMON] Node %d reports in readAndParseHeader:\n"
                    "        only %d bytes were read.\n", reader->my_rank, err);
    return LEMON_ERR_HEADER_NEXT;
  }

  /* Check magic number */
  magic_no = big_endian_long(*lemon_hdr_magic_no);
  if(magic_no != LEMON_MAGIC_NO)
  {
    fprintf(stderr, "[LEMON] Node %d reports in readAndParseHeader:\n"
                    "        read %x for magic number, expected %x.\n", reader->my_rank, magic_no, LEMON_MAGIC_NO);
    return LEMON_ERR_HEADER_NEXT;
  }

  /* LEMON version number */
  version = big_endian_short(*lemon_hdr_version);

  /* Message flags */
  MB = (*lemon_hdr_mbme & MB_MASK) ? 1 : 0;
  ME = (*lemon_hdr_mbme & ME_MASK) ? 1 : 0;

  /* Data length */
  data_length = big_endian_long_long(*lemon_hdr_data_len);

  /* Record type. */
  typebuf = (unsigned char *)lemon_hdr_rec_type;

  /* Sanity Checking */
  MPI_Barrier(reader->cartesian);
  reader->curr_header = lemonCreateHeader(MB, ME, (char*)typebuf, data_length);
  if (reader->curr_header == (LemonRecordHeader *)NULL )
  {
    fprintf(stderr, "[LEMON] Node %d reports in readAndParseHeader:\n"
                    "        could not allocate header.\n", reader->my_rank);
    return LEMON_ERR_HEADER_NEXT;
  }

  MPI_Barrier(reader->cartesian);
  reader->off += reader->pos;
  reader->pos = 0;

  return LEMON_SUCCESS;
}
